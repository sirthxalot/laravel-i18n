import{_ as r,r as s,o as d,c as p,a,b as n,d as e,w as t,e as u,f as o}from"./app-c303192f.js";const h={},m=o('<h2 id="database-driver" tabindex="-1"><a class="header-anchor" href="#database-driver" aria-hidden="true">#</a> Database Driver</h2><p>The I18n database driver is the default driver and is meant to load translations from a database connection. This driver works with Eloquent models and/or database migrations, with all the goodies we artisans know and love so much.</p><p>Translations and languages are database records and can be found within their tables.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>If you are changing the migrations or models we may not support you anymore. We are always interested in different routes and love to explore them, but sometimes we may not have the time for this. So changing the database structure of I18n is possible but only on your own responsibility.</p></div><h3 id="database-migrations" tabindex="-1"><a class="header-anchor" href="#database-migrations" aria-hidden="true">#</a> Database Migrations</h3>',5),g={href:"https://laravel.com/docs/10.x/migrations",target:"_blank",rel:"noopener noreferrer"},k=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you would like to change the database structure for languages and/or translations you will need to publish the migrations first:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan vendor:publish <span class="token parameter variable">--tag</span><span class="token operator">=</span>i18n-migration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="customize-models" tabindex="-1"><a class="header-anchor" href="#customize-models" aria-hidden="true">#</a> Customize Models</h3><p>If you are extending or replacing the language/translation models, you will need to specify your new models in this package&#39;s <code>config/i18n.php</code> file:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;database&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;models&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;language&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Sirthxalot<span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>I18n<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Language</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;translation&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Sirthxalot<span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>I18n<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Translation</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="extending-models" tabindex="-1"><a class="header-anchor" href="#extending-models" aria-hidden="true">#</a> Extending Models</h4><p>More than often you only will need to extend a model, which adds new functionality while keeping the fundamentals. So all you need to do is to create a new model that extends the I18n models. Here is an example of how to do that with the language model:</p>`,8),v=a("div",{class:"language-php line-numbers-mode","data-ext":"php"},[a("pre",{class:"language-php"},[a("code",null,[a("span",{class:"token php language-php"},[a("span",{class:"token delimiter important"},"<?php"),n(),a("span",{class:"token keyword"},"namespace"),n(),a("span",{class:"token package"},[n("App"),a("span",{class:"token punctuation"},"\\"),n("Models")]),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token keyword"},"use"),n(),a("span",{class:"token package"},[n("Sirthxalot"),a("span",{class:"token punctuation"},"\\"),n("Laravel"),a("span",{class:"token punctuation"},"\\"),n("I18n"),a("span",{class:"token punctuation"},"\\"),n("Models"),a("span",{class:"token punctuation"},"\\"),n("Language")]),n(),a("span",{class:"token keyword"},"as"),n(" I18nLanguage"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token class-name-definition class-name"},"Language"),n(),a("span",{class:"token keyword"},"extends"),n(),a("span",{class:"token class-name"},"I18nLanguage"),n(`
`),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token comment"},"//..."),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),b=a("div",{class:"language-php line-numbers-mode","data-ext":"php"},[a("pre",{class:"language-php"},[a("code",null,[a("span",{class:"token php language-php"},[a("span",{class:"token delimiter important"},"<?php"),n(),a("span",{class:"token keyword"},"namespace"),n(),a("span",{class:"token package"},[n("App"),a("span",{class:"token punctuation"},"\\"),n("Models")]),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token keyword"},"use"),n(),a("span",{class:"token package"},[n("Sirthxalot"),a("span",{class:"token punctuation"},"\\"),n("Laravel"),a("span",{class:"token punctuation"},"\\"),n("I18n"),a("span",{class:"token punctuation"},"\\"),n("Models"),a("span",{class:"token punctuation"},"\\"),n("Translation")]),n(),a("span",{class:"token keyword"},"as"),n(" I18nTranslation"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token keyword"},"class"),n(),a("span",{class:"token class-name-definition class-name"},"Translation"),n(),a("span",{class:"token keyword"},"extends"),n(),a("span",{class:"token class-name"},"I18nTranslation"),n(`
`),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token comment"},"//..."),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),f=o('<p>So that&#39;s easy, but don&#39;t forget to update the configuration.</p><h4 id="replacing-models" tabindex="-1"><a class="header-anchor" href="#replacing-models" aria-hidden="true">#</a> Replacing Models</h4><p>While it is possible to replace model things may get complicated and is only meant in rare cases where a master is doing his work.</p><ul><li>Language Model <ul><li>New models must implement the <code>Sirthxalot\\Laravel\\I18n\\Contracts\\Models\\LanguageContract</code> contract</li><li>It must have a fillable locale attribute.</li></ul></li><li>Translation Model <ul><li>New models must implement the <code>Sirthxalot\\Laravel\\I18n\\Contracts\\Models\\TranslationContract</code> contract</li><li>It must have a fillable key attribute.</li><li>It must have a fillable locale attribute.</li><li>It must have a fillable message attribute.</li></ul></li></ul><h2 id="file-driver" tabindex="-1"><a class="header-anchor" href="#file-driver" aria-hidden="true">#</a> File Driver</h2><p>The I18n file driver acts pretty much the same as the default Laravel translation workflow. It also loads the translations from <code>.php</code> or <code>.json</code> files. In fact, it does not even touch Laravel&#39;s default translator.</p><p>In addition, the file driver can also scan the <code>lang/</code> directory for any language even within the vendor directories. All a language needs is a <code>{locale}/</code> directory or <code>{locale}.json</code> file.</p>',7);function w(y,x){const i=s("ExternalLinkIcon"),l=s("CodeGroupItem"),c=s("CodeGroup");return d(),p("div",null,[m,a("p",null,[n("The "),a("a",g,[n("migrations"),e(i)]),n(" will be loaded within the package by default. This allows to follow our convention and ensures that everything works as expected without focusing on the database too much. All you need to do is to migrate and you are done:")]),k,e(c,null,{default:t(()=>[e(l,{title:"Language"},{default:t(()=>[v]),_:1}),e(l,{title:"Translation"},{default:t(()=>[b]),_:1})]),_:1}),f,u("                            that's all folks!                            ")])}const I=r(h,[["render",w],["__file","index.html.vue"]]);export{I as default};
