import{_ as d,r as o,o as p,c as u,a as e,b as a,t as h,d as n,w as r,e as m,f as t}from"./app-c303192f.js";const b={},g=e("h2",{id:"chapter-01-common-standards",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#chapter-01-common-standards","aria-hidden":"true"},"#"),a(" Chapter-01: Common Standards")],-1),v=e("h3",{id:"laravel-standards",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#laravel-standards","aria-hidden":"true"},"#"),a(" Laravel Standards")],-1),k={href:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md",target:"_blank",rel:"noopener noreferrer"},y={href:"https://laravel.com/docs/10.x/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://laravel.com/docs/10.x/packages",target:"_blank",rel:"noopener noreferrer"},_={href:"https://laravelpackage.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://refactoring.guru/design-patterns/php",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/alexeymezenin/laravel-best-practices#contents",target:"_blank",rel:"noopener noreferrer"},q=e("h3",{id:"versioning-scheme",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#versioning-scheme","aria-hidden":"true"},"#"),a(" Versioning Scheme")],-1),T={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},S=t(`<ul><li><strong>Major</strong> version when you make incompatible API changes</li><li><strong>Minor</strong> version when you add functionality in a backward compatible manner</li><li><strong>Patch</strong> version when you make backward compatible bug fixes</li></ul><p>When referencing Laravel I18n from your application or package, you should always use a version constraint such as <code>^1.0</code>, since major releases do include breaking changes. However, we strive to always ensure you may update to a new major release in one day.</p><h3 id="code-deprecation" tabindex="-1"><a class="header-anchor" href="#code-deprecation" aria-hidden="true">#</a> Code Deprecation</h3><p>From time to time, some classes and/or methods are deprecated; that happens when a feature implementation cannot be changed because of backward compatibility issues, but we still want to propose a &quot;better&quot; alternative. In that case, the old implementation can be deprecated.</p><p>Deprecation must only be introduced on the next minor version of the impacted source code. They can exceptionally be introduced on previously supported versions if they are critical.</p><p>A feature is marked as deprecated by adding a <code>@deprecated</code> PHPDoc to relevant classes, methods, properties, ...:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@deprecated</span> since 1.0.0.
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The deprecation message must indicate the version in which the feature was deprecated, and whenever possible, how it was replaced:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@deprecated</span> since 1.0.0, use alternative() instead.
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),C={href:"https://github.com/symfony/deprecation-contracts",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">trigger_deprecation</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">&#39;sirthxalot/laravel-i18n&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;5.1&#39;</span><span class="token punctuation">,</span> 
    <span class="token string single-quoted-string">&#39;The &quot;%s&quot; class is deprecated, use &quot;%s&quot; instead.&#39;</span><span class="token punctuation">,</span> 
    <span class="token class-name static-context">Deprecated</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">Replacement</span><span class="token operator">::</span><span class="token keyword">class</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="php-code-style-fixing" tabindex="-1"><a class="header-anchor" href="#php-code-style-fixing" aria-hidden="true">#</a> PHP Code Style Fixing</h3>`,2),I={href:"https://laravel.com/docs/10.x/pint",target:"_blank",rel:"noopener noreferrer"},D=e("h3",{id:"php-docblocks",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#php-docblocks","aria-hidden":"true"},"#"),a(" PHP DocBlocks")],-1),H={href:"https://laravel.com/docs/10.x/contributions#phpdoc",target:"_blank",rel:"noopener noreferrer"},L=e("div",{class:"language-php line-numbers-mode","data-ext":"php"},[e("pre",{class:"language-php"},[e("code",null,[e("span",{class:"token doc-comment comment"},[a(`/**
 * A simple description of what the method does.
 *
 * `),e("span",{class:"token keyword"},"@since"),a(`  1.0.0
 * `),e("span",{class:"token keyword"},"@version"),a(` 1.6.5
 * 
 * `),e("span",{class:"token keyword"},"@deprecated"),a(` since 1.3.1, use alternative() instead.
 * 
 * `),e("span",{class:"token keyword"},"@todo"),a(`   Something that needs to be done.
 * `),e("span",{class:"token keyword"},"@todo"),a(`   Something that needs to be done later.
 * 
 * `),e("span",{class:"token keyword"},"@see"),a(`    \\SomeSortOfEvent
 * 
 * `),e("span",{class:"token keyword"},"@param"),a("  "),e("span",{class:"token class-name"},[e("span",{class:"token keyword"},"string"),e("span",{class:"token punctuation"},"|"),e("span",{class:"token keyword"},"array")]),a("  "),e("span",{class:"token parameter"},"$abstract"),a(`  "Foo" or ['foo']
 * `),e("span",{class:"token keyword"},"@param"),a("  "),e("span",{class:"token class-name"},[e("span",{class:"token keyword"},"string")]),a("  "),e("span",{class:"token parameter"},"$locale"),a(`  "en_US"
 * `),e("span",{class:"token keyword"},"@param"),a("  "),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"\\"),a("Closure"),e("span",{class:"token punctuation"},"|"),e("span",{class:"token keyword"},"string"),e("span",{class:"token punctuation"},"|"),e("span",{class:"token keyword"},"null")]),a("  "),e("span",{class:"token parameter"},"$concrete"),a(`
 * `),e("span",{class:"token keyword"},"@param"),a("  "),e("span",{class:"token class-name"},[e("span",{class:"token keyword"},"bool")]),a("  "),e("span",{class:"token parameter"},"$shared"),a(`
 * `),e("span",{class:"token keyword"},"@return"),a(),e("span",{class:"token class-name"},[e("span",{class:"token keyword"},"void")]),a(`
 *
 * `),e("span",{class:"token keyword"},"@throws"),a(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"\\"),a("Exception")]),a(`
 */`)]),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),N=e("div",{class:"language-php line-numbers-mode","data-ext":"php"},[e("pre",{class:"language-php"},[e("code",null,[e("span",{class:"token comment"},`/*
|--------------------------------------------------------------------------
| Application Name
|--------------------------------------------------------------------------
|
| This value is the name of your application. This value is used when the
| framework needs to place the application's name in a notification or
| any other location as required by the application or its packages.
|
*/`),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),A=e("h2",{id:"chapter-02-report-for-duty",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#chapter-02-report-for-duty","aria-hidden":"true"},"#"),a(" Chapter-02: Report for Duty")],-1),B=e("h3",{id:"check-if-nothing-is-cooking",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#check-if-nothing-is-cooking","aria-hidden":"true"},"#"),a(" Check if nothing is cooking.")],-1),G={href:"https://github.com/sirthxalot/laravel-i18n/issues?q=+is%3Aopen+",target:"_blank",rel:"noopener noreferrer"},V=e("code",null,"#ideas",-1),j={href:"https://github.com/sirthxalot/laravel-i18n/discussions/categories/ideas",target:"_blank",rel:"noopener noreferrer"},F=e("h3",{id:"report-an-issue-and-wait",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#report-an-issue-and-wait","aria-hidden":"true"},"#"),a(" Report an issue and wait.")],-1),E={href:"https://github.com/sirthxalot/laravel-i18n/issues",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,"You will find a comment (from a maintainer) within the issue, that may confirm your request. Otherwise, you will get some explanations why we don't support your request.",-1),U=e("h3",{id:"fork-the-source-code",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#fork-the-source-code","aria-hidden":"true"},"#"),a(" Fork the source code.")],-1),M={href:"https://docs.github.com/de/get-started/quickstart/fork-a-repo",target:"_blank",rel:"noopener noreferrer"},W=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/<span class="token operator">&lt;</span>your-username<span class="token operator">&gt;</span>/laravel-i18n.git
<span class="token builtin class-name">cd</span> laravel-i18n/
<span class="token function">git</span> remote <span class="token function">add</span> upstream https://github.com/sirthxalot/laravel-i18n.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Replace <code>&lt;your-username&gt;</code> with your GitHub account username.</p></div><p>If you cloned a while ago, get the latest changes from upstream:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
<span class="token function">git</span> pull upstream main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run-tests" tabindex="-1"><a class="header-anchor" href="#run-tests" aria-hidden="true">#</a> Run tests.</h3><p>Now that you have installed Laravel I18n check if all test pass by running the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="create-a-topic-branch" tabindex="-1"><a class="header-anchor" href="#create-a-topic-branch" aria-hidden="true">#</a> Create a topic branch.</h3><p>Each time you want to work on a PR for a bug or on an enhancement, create a topic branch:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span> main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Replace <code>&lt;branch-name&gt;</code> with your topic branch name. Use a descriptive name for your branch e.g. <code>issue_1_fix_something</code>. Use words like <code>add</code>, <code>change</code>, <code>remove</code>, <code>update</code>...</p></div><p>Or, if you want to provide a bug fix for the <code>2.3</code> branch, first track the remote <code>2.3</code> branch locally, than create a new branch off the <code>2.3</code> branch to work on the bug fix:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">--track</span> origin/2.3
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span> <span class="token number">2.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="work-on-your-code" tabindex="-1"><a class="header-anchor" href="#work-on-your-code" aria-hidden="true">#</a> Work on your code.</h3><p>You are now ready to work on the source code and achieve some amazing stuff. But keep in mind the following:</p><ul><li>All the code you are going to submit must be released under the MIT license;</li><li>Add unit or feature tests to prove that everything works;</li><li>Try hard to not break backward compatibility (if you must do so, try to provide a compatibility layer to support the old way) -- PRs that break backward compatibility have less chance to be merged;</li><li>Do atomic and logically separate commits (use the power of <code>git rebase</code> to have a clean and logical history);</li><li>Never fix coding standards in some existing code as it makes the code review more difficult;</li><li>Write good commit messages: Start by a short subject line (the first line), followed by a blank line and a more detailed description.</li></ul><h2 id="chapter-03-documentation" tabindex="-1"><a class="header-anchor" href="#chapter-03-documentation" aria-hidden="true">#</a> Chapter-03: Documentation</h2>`,17),$={href:"https://v2.vuepress.vuejs.org/guide/markdown.html",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://v2.vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>Before you can use the documentation you must install its Node dependencies:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Next you can start a build-in webserver to serve the documentation on localhost:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run docs:dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="chapter-04-testing" tabindex="-1"><a class="header-anchor" href="#chapter-04-testing" aria-hidden="true">#</a> Chapter-04: Testing</h2>`,5),J={href:"https://phpunit.de/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/orchestral/testbench",target:"_blank",rel:"noopener noreferrer"},Q=t(`<ul><li><strong>Unit Tests</strong>: are located within <code>tests/Unit/</code> directory. They ensure that individual units of source code (e.g. a single class) behave as intended.</li><li><strong>Feature Tests</strong>: are located within the <code>tests/Feature/</code> directory. These tests may check a larger portion of your code, including how several objects interact with each other or even a full HTTP request to a JSON endpoint.</li><li><strong>Test Cases</strong>: are located within the <code>tests/</code> directory. They are meant to group external behavior that can be reused for other tests and don&#39;t do any assertions.</li></ul><h2 id="chapter-05-submit-pull-request" tabindex="-1"><a class="header-anchor" href="#chapter-05-submit-pull-request" aria-hidden="true">#</a> Chapter-05: Submit Pull Request</h2><h3 id="rebase-your-pull-request" tabindex="-1"><a class="header-anchor" href="#rebase-your-pull-request" aria-hidden="true">#</a> Rebase your Pull Request.</h3><p>Before submitting your PR, update your branch (needed if it takes you a while to finish your changes):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token operator">&lt;</span><span class="token number">2</span>.x<span class="token operator">&gt;</span>
<span class="token function">git</span> fetch upstream
<span class="token function">git</span> merge upstream/<span class="token operator">&lt;</span><span class="token number">2</span>.x<span class="token operator">&gt;</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span>
<span class="token function">git</span> rebase <span class="token operator">&lt;</span><span class="token number">2</span>.x<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Replace <code>&lt;2.x&gt;</code> with the branch you selected previously (e.g. <code>2.3</code>) if you are working on a bug fix.</p></div><p>When doing the <code>rebase</code> command, you might have to fix merge conflicts. <code>git status</code> will show you the unmerged files. Resolve all the conflicts, then continue the rebase:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">..</span>. <span class="token comment"># add resolved files</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Check that all tests still pass and push your branch remotely:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">--force</span> origin <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="open-a-pull-request" tabindex="-1"><a class="header-anchor" href="#open-a-pull-request" aria-hidden="true">#</a> Open a Pull Request.</h3>`,11),X={href:"https://github.com/sirthxalot/laravel-i18n/compare",target:"_blank",rel:"noopener noreferrer"},Z=e("code",null,"sirthxalot/laravel-i18n",-1),ee=e("p",null,"The default pull request description contains a table which you must fill in with the appropriate answers. This ensures that contributions may be reviewed without needless feedback loops and that your contributions can be included into Laravel I18n as quickly as possible.",-1);function ae(l,ne){const s=o("ExternalLinkIcon"),i=o("CodeGroupItem"),c=o("CodeGroup");return p(),u("div",null,[g,v,e("p",null,[a(h(l.$site.title)+" is a software made for Laravel and follows their convention whenever it can. This is why it follows the ",1),e("a",k,[a("PSR-2"),n(s)]),a(" coding standard and the "),e("a",f,[a("PSR-4"),n(s)]),a(" autoloading standard.")]),e("p",null,[a("So before you begin you should be familiar with the "),e("a",y,[a("Laravel documentation"),n(s)]),a(" and "),e("a",w,[a("how to develop a Laravel package"),n(s)]),a(". And if you would like to tune your skills you should definietly checkout these bad boys:")]),e("ul",null,[e("li",null,[e("a",_,[a("Laravel Package.com"),n(s)])]),e("li",null,[e("a",x,[a("PHP Design Patterns"),n(s)])]),e("li",null,[e("a",P,[a("Best Practices"),n(s)])])]),q,e("p",null,[a("Laravel I18n follows "),e("a",T,[a("Semantic Versioning 2.0.0"),n(s)]),a(".")]),S,e("p",null,[a("A deprecation must also be triggered to help people with the migration (uses "),e("a",C,[a("symfony/deprecation-contracts"),n(s)]),a("):")]),R,e("p",null,[a("Don't worry if your code styling isn't perfect! "),e("a",I,[a("Laravel Pint"),n(s)]),a(" will automatically merge any style fixes into the repository after pull requests are merged. This allows us to focus on the content of the contribution and not the code style.")]),D,e("p",null,[a("PHP documentation blocks (DocBlocks) should follow "),e("a",H,[a("Laravels PHP Doc convention"),n(s)]),a(".")]),n(c,null,{default:r(()=>[n(i,{title:"PHP Method"},{default:r(()=>[L]),_:1}),n(i,{title:"PHP Array"},{default:r(()=>[N]),_:1})]),_:1}),A,B,e("p",null,[a("Don't burn yourself and see if someone else also raised the topic or maybe even started working on a pull request by "),e("a",G,[a("searching on GitHub"),n(s)]),a(". If you are unsure or if you have any questions during this entire process, please ask your questions in the "),V,a(" category on "),e("a",j,[a("GitHub Discussions"),n(s)]),a(".")]),F,e("p",null,[a("Next, you should report an issue using the "),e("a",E,[a("issue tracker"),n(s)]),a(" and await orders. Seriously you should not begin to code anything before you have any warranties that it will be merged into the final source code.")]),O,U,e("p",null,[e("a",M,[a("Fork"),n(s)]),a(" the source code, clone your fork, and configure the remotes:")]),W,e("p",null,[a("The documentation is bundled with the source code which makes it available for offline reading and makes it easier to update it for you. It has been written in "),e("a",$,[a("Markdown"),n(s)]),a(" using "),e("a",Y,[a("VuePress 2"),n(s)]),a(" as site generator.")]),z,e("p",null,[a("Whenever you write a new line of code, you also potentially add new bugs. To build better and more reliable code, you should test it. This is why "),e("a",J,[a("PHPUnit"),n(s)]),a(" and "),e("a",K,[a("Testbench"),n(s)]),a(" has been implemented - these frameworks assist you writing clean tests. Our testing suite is usually separated into the following parts:")]),Q,e("p",null,[a("You can now "),e("a",X,[a("make a pull request"),n(s)]),a(" on the "),Z,a(" GitHub repository.")]),ee,m(" -------------------------- that's all folks! -------------------------- ")])}const te=d(b,[["render",ae],["__file","index.html.vue"]]);export{te as default};
