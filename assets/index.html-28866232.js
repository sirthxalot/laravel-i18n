import{_ as a,o as e,c as n,f as s}from"./app-c303192f.js";const t={},i=s(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>A language&#39;s locale is the perfect way, to inform a system about a language. However, they are hard to understand for humans. So, more than often you will need to convert a locale into a readable output e.g. &quot;English&quot; or &quot;German&quot;.</p><p>But wait there is no language name supported in any translation service method or even the database! So how do we manage to translate a locale into a readable name?</p><p>Well, this will be done through our <code>i18n::languages.{locale}</code> vendor translations.</p><h2 id="get-language-translation" tabindex="-1"><a class="header-anchor" href="#get-language-translation" aria-hidden="true">#</a> Get Language Translation</h2><p>Use the <code>i18n_lang()</code> helper function, to translate a locale into a readable string for humans:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">i18n_lang</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This method expects the locale e.g. &quot;en_US&quot; and tries to translate it (using a key like <code>i18n::languages.en_US</code>). If the key is missing then it falls back to the locale (&quot;en_US&quot;).</p><p>You could use the translations within the regular translation methods. However, this may lead to a problem since languages that have not been translated will return the key which is still even harder to read:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;i18n::languages.en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="translate-languages" tabindex="-1"><a class="header-anchor" href="#translate-languages" aria-hidden="true">#</a> Translate Languages</h2><h3 id="file-driver" tabindex="-1"><a class="header-anchor" href="#file-driver" aria-hidden="true">#</a> File Driver</h3><p>Create a new <code>languages.php</code> file within the <code>lang/vendor/i18n/{locale}/</code> directory:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;de_CH&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Swiss German&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it you already translated those locales in a given locale (here english).</p><h3 id="database-driver" tabindex="-1"><a class="header-anchor" href="#database-driver" aria-hidden="true">#</a> Database Driver</h3><h4 id="without-existing-translations" tabindex="-1"><a class="header-anchor" href="#without-existing-translations" aria-hidden="true">#</a> Without Existing Translations</h4><p>If you don&#39;t have any translations loaded into the database or don&#39;t care if the translations may be overwritten then you should use the <code>i18n:sync</code> artisan command to synchronize drivers. But before you do that create the translations as described for the <a href="#file-driver">file driver</a>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Whenever you sync the file driver into the database it will overwrite existing translations in the database. So be careful when you synchronize drivers.</p></div><p>After creating the translation file use the sync artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan i18n:sync <span class="token string">&quot;file&quot;</span> <span class="token string">&quot;database&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Confirm with <code>yes</code> if you would like to sync all translations in all languages. Otherwise use the third argument to determine the locale you want to use:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan i18n:sync <span class="token string">&quot;file&quot;</span> <span class="token string">&quot;database&quot;</span> <span class="token string">&quot;en&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="with-existing-translations" tabindex="-1"><a class="header-anchor" href="#with-existing-translations" aria-hidden="true">#</a> With Existing Translations</h4><p>If you can delete all translation files and directories you don&#39;t need or want to be overwritten and do the same as <a href="#without-existing-translations">without existing translations</a>.</p><p>Otherwise, you should use the artisan command meant to create or update a translation:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan i18n:set-translation <span class="token string">&quot;i18n::languages.en&quot;</span> <span class="token string">&quot;en&quot;</span> <span class="token string">&quot;English&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Or you could also use the <code>setTranslation()</code> method within the I18n service.</p>`,28),o=[i];function r(l,d){return e(),n("div",null,o)}const u=a(t,[["render",r],["__file","index.html.vue"]]);export{u as default};
