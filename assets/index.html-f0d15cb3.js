import{_ as c,r as e,o as p,c as u,a,d as s,w as t,b as n,e as d,f as o}from"./app-c303192f.js";const h={},g=o(`<h2 id="recursively-difference-two-arrays" tabindex="-1"><a class="header-anchor" href="#recursively-difference-two-arrays" aria-hidden="true">#</a> Recursively Difference Two Arrays</h2><p>Use the <code>array_diff_assoc_recursive()</code> method to recursively differentiate two arrays:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">array_diff_assoc_recursive</span><span class="token punctuation">(</span><span class="token variable">$arrayOne</span><span class="token punctuation">,</span> <span class="token variable">$arrayTwo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),_={class:"custom-container details"},k=a("summary",null,"Technical Details",-1),m=a("div",{class:"language-php line-numbers-mode","data-ext":"php"},[a("pre",{class:"language-php"},[a("code",null,[a("span",{class:"token variable"},"$arrayOne"),n(),a("span",{class:"token operator"},"="),n(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string single-quoted-string"},"'a'"),n(),a("span",{class:"token operator"},"=>"),n(),a("span",{class:"token string double-quoted-string"},'"a1"'),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token string single-quoted-string"},"'c'"),n(),a("span",{class:"token operator"},"=>"),n(),a("span",{class:"token string double-quoted-string"},'"d1"'),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token variable"},"$arrayTwo"),n(),a("span",{class:"token operator"},"="),n(),a("span",{class:"token punctuation"},"["),a("span",{class:"token string single-quoted-string"},"'a'"),n(),a("span",{class:"token operator"},"=>"),n(),a("span",{class:"token string double-quoted-string"},'"a2"'),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token string single-quoted-string"},"'b'"),n(),a("span",{class:"token operator"},"=>"),n(),a("span",{class:"token string double-quoted-string"},'"b2"'),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token function"},"array_diff_assoc_recursive"),a("span",{class:"token punctuation"},"("),a("span",{class:"token variable"},"$arrayOne"),a("span",{class:"token punctuation"},","),n(),a("span",{class:"token variable"},"$arrayTwo"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),v=a("div",{class:"language-php line-numbers-mode","data-ext":"php"},[a("pre",{class:"language-php"},[a("code",null,[a("span",{class:"token punctuation"},"["),a("span",{class:"token string single-quoted-string"},"'c'"),n(),a("span",{class:"token operator"},"=>"),n(),a("span",{class:"token string double-quoted-string"},'"d1"'),a("span",{class:"token punctuation"},"]"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),b=o(`<h2 id="i18n-lang" tabindex="-1"><a class="header-anchor" href="#i18n-lang" aria-hidden="true">#</a> I18n Lang</h2><p>Use the <code>i18n_lang()</code> method to translate a locale into a readable string e.g. &quot;English&quot;:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">i18n_lang</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="array-variable-export-with-squares" tabindex="-1"><a class="header-anchor" href="#array-variable-export-with-squares" aria-hidden="true">#</a> Array Variable Export with Squares</h2>`,4),f=a("code",null,"var_export_with_array_squares()",-1),y={href:"https://www.php.net/manual/en/function.var-export.php",target:"_blank",rel:"noopener noreferrer"},x=o(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">var_export_with_array_squares</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p><strong>Parameters</strong>:</p><ul><li><strong>array</strong>: An <u>array</u> that contains the data for export.</li><li><strong>return</strong>: Optional <u>boolean</u> that determines if the result should be printed (<code>false</code>) or returned (<code>true</code>). Default is <code>false</code>.</li></ul></details>`,2);function q(w,C){const r=e("CodeGroupItem"),i=e("CodeGroup"),l=e("ExternalLinkIcon");return p(),u("div",null,[g,a("details",_,[k,s(i,null,{default:t(()=>[s(r,{title:"Code Example"},{default:t(()=>[m]),_:1}),s(r,{title:"Result Example"},{default:t(()=>[v]),_:1})]),_:1})]),b,a("p",null,[n("Use the "),f,n(" method to "),a("a",y,[n("var_export"),s(l)]),n(" arrays using square notation:")]),x,d("                            that's all folks!                            ")])}const T=c(h,[["render",q],["__file","index.html.vue"]]);export{T as default};
