import{_ as r,r as o,o as u,c,a as n,t as d,b as s,d as a,w as t,e as g,f as l}from"./app-c303192f.js";const h={},m=l(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Use the application helper to resolve the I18n service:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Sirthxalot<span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>I18n<span class="token punctuation">\\</span>Translation</span><span class="token punctuation">;</span>

<span class="token variable">$i18n</span> <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">Translation</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="locales" tabindex="-1"><a class="header-anchor" href="#locales" aria-hidden="true">#</a> Locales</h2>`,4),v=l(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setLocale</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;de&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setLocale</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;de_CH&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Or:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="languages" tabindex="-1"><a class="header-anchor" href="#languages" aria-hidden="true">#</a> Languages</h2><h3 id="add-new-language" tabindex="-1"><a class="header-anchor" href="#add-new-language" aria-hidden="true">#</a> Add New Language</h3><p>Use the <code>addLanguage()</code> method to create a new language if it does not exist:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">addLanguage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),k={class:"custom-container details"},b=n("summary",null,"Technical Details",-1),_=l("<p><strong>Parameter</strong>:</p><ul><li><strong>locale</strong>: A <u>string</u> that defines the language&#39;s locale.</li></ul><p><strong>Return</strong>:<br> Returns a <u>boolean</u> that determines if the language has been created (<code>true</code>) or not (<code>false</code>).</p>",3),f=n("strong",null,"Events",-1),y=n("br",null,null,-1),x=l(`<h3 id="list-all-languages" tabindex="-1"><a class="header-anchor" href="#list-all-languages" aria-hidden="true">#</a> List All Languages</h3><p>Use the <code>allLanguages()</code> method to list all languages available:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">allLanguages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p><strong>Return</strong>:<br> Returns an <u>array</u> that lists each language locale and translated name for the current locale:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;en&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;English&quot;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;en_US&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;en_US&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If no languages were found, then it returns an <u>empty array</u>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="checking-language-existence" tabindex="-1"><a class="header-anchor" href="#checking-language-existence" aria-hidden="true">#</a> Checking Language Existence</h3><p>Use the <code>languageExists()</code> method to determine if a language exists or not:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">languageExists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p><strong>Parameter</strong>:</p><ul><li><strong>locale</strong>: Optional <u>string</u> that determines the language&#39;s locale.</li></ul><p><strong>Return</strong>:<br> Returns a <u>boolean</u> that determines if the language exists (<code>true</code>) or not (<code>false</code>).</p></details><h3 id="remove-existing-language" tabindex="-1"><a class="header-anchor" href="#remove-existing-language" aria-hidden="true">#</a> Remove Existing Language</h3><p>Use the <code>removeLanguage()</code> method to remove an existing language:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">removeLanguage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Always backup your file system and database before you delete any language.</p><p>Deleting a language also deletes its translations. This means if you are running the file driver, then it will delete all translation files from your disk that are corresponding to this language. And vice versa on the database driver - it will remove the language and all translation relationships.</p></div>`,12),q={class:"custom-container details"},T=l("<summary>Technical Details</summary><p><strong>Parameter</strong>:</p><ul><li><strong>locale</strong>: A <u>string</u> that defines the language&#39;s locale.</li></ul><p><strong>Return</strong>:<br> It returns a <u>boolean</u> that determines if the language was removed (<code>true</code>) or not (<code>false</code>).</p>",4),w=n("strong",null,"Events",-1),A=n("br",null,null,-1),R=l(`<h2 id="translations" tabindex="-1"><a class="header-anchor" href="#translations" aria-hidden="true">#</a> Translations</h2><h3 id="add-new-translation" tabindex="-1"><a class="header-anchor" href="#add-new-translation" aria-hidden="true">#</a> Add New Translation</h3><p>Use the <code>addTranslation()</code> method to create a new translation if it does not exist:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">addTranslation</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;animals.dog&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;A dog barks.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),U={class:"custom-container details"},L=n("summary",null,"Technical Details",-1),E=n("p",null,[n("strong",null,"Parameters"),s(":")],-1),D=n("strong",null,"key",-1),H=n("u",null,"string",-1),S=n("li",null,[n("strong",null,"locale"),s(": A "),n("u",null,"string"),s(" that determines the translation's locale.")],-1),N=n("li",null,[n("strong",null,"message"),s(": A "),n("u",null,"string"),s(" that determines the translation message, could be empty "),n("code",null,'""'),s(".")],-1),$=n("p",null,[n("strong",null,"Return"),s(":"),n("br"),s(" Returns a "),n("u",null,"boolean"),s(" that determines if the translation has been created ("),n("code",null,"true"),s(") or not ("),n("code",null,"false"),s(").")],-1),I=n("strong",null,"Events",-1),P=n("br",null,null,-1),z=l(`<h3 id="list-all-translations-strict" tabindex="-1"><a class="header-anchor" href="#list-all-translations-strict" aria-hidden="true">#</a> List All Translations (Strict)</h3><p>Use the <code>allTranslations()</code> method to list all translations available:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">allTranslations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p><strong>Return</strong>:<br> Returns an <u>array</u> that lists all languages. Each language contains a list of the translation keys and translation messages found for a given language:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span>
  <span class="token string single-quoted-string">&#39;de&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;Hello&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Hallo :Name&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#39;en&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;Hello&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Hello :Name&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;animals.dog&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;i18n::languages.en&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;English&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#39;fr&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If no languages were found, then it returns an <u>empty array</u>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="list-all-translations-loose" tabindex="-1"><a class="header-anchor" href="#list-all-translations-loose" aria-hidden="true">#</a> List All Translations (Loose)</h3><p>Use the <code>allTranslationsLoose()</code> method to list all translations, but also ensure that each translation key is represented:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">allTranslationsLoose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p><strong>Return</strong>:<br> Returns an <u>array</u> that lists all languages. Each language contains a list of all translation keys and its translation message. If no translation message was found for a given language then its message is <code>null</code>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span>
  <span class="token string single-quoted-string">&#39;de&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;Hello&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Hallo :Name&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;animals.dog&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;i18n::languages.en&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#39;en&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;Hello&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Hello :Name&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;animals.dog&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;i18n::languages.en&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;English&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#39;fr&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;Hello&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;animals.dog&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;i18n::languages.en&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If no languages were found, then it returns an <u>empty array</u>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="list-all-translations-horizontal" tabindex="-1"><a class="header-anchor" href="#list-all-translations-horizontal" aria-hidden="true">#</a> List All Translations Horizontal</h3><p>Use the <code>allTranslationsHorizontal()</code> method to get a horizontal list of all translations:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">allTranslationsHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p>Sometimes you may need a list of all translation keys with their languages and messages. This structure can be useful if you would like to show all translation messages next to each other, this is why we call it the horizontal list.</p><p><strong>Return</strong>:<br> Returns an <u>array</u> that lists all translation keys. Each translation key contains a list of the languages and translation messages:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span>
  <span class="token string single-quoted-string">&#39;Hello&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;de&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Hallo :Name&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;en&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Hello :Name&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;fr&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#39;animals.dog&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;de&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;en&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;fr&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#39;i18n::languages.en&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;de&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;en&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;English&quot;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;fr&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If no translation keys were found, then it returns an <u>empty array</u>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="list-all-translation-keys" tabindex="-1"><a class="header-anchor" href="#list-all-translation-keys" aria-hidden="true">#</a> List All Translation Keys</h3><p>Use the <code>allTranslationKeys()</code> method to list all translation keys available:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">allTranslationKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p><strong>Return</strong>:<br> Returns an <u>array</u> that lists each translation key available. Each item has a <code>null</code> value. This makes it easier to merge these keys with other translations.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span>
  <span class="token string single-quoted-string">&#39;Hello&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#39;animals.dog&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#39;i18n::animals.dog&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If no translation keys were found, then it returns an <u>empty array</u>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="list-all-missing-translations" tabindex="-1"><a class="header-anchor" href="#list-all-missing-translations" aria-hidden="true">#</a> List All Missing Translations</h3><p>Use the <code>allMissingTranslations()</code> method to list all missing translations for a given locale:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">allMissingTranslations</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p><strong>Parameter</strong>:</p><ul><li><strong>locale</strong>: A <u>string</u> that determines the locale.</li></ul><p><strong>Return</strong>:<br> Returns an <u>array</u> that lists all missing translation keys for a given locale:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span>
  <span class="token string double-quoted-string">&quot;Unauthorized&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;&quot;</span>
  <span class="token string double-quoted-string">&quot;pagination.previous&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;&quot;</span>
  <span class="token string double-quoted-string">&quot;i18n::languages.zho&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;&quot;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If no missing translations were found, then it returns an <u>empty array</u>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="checking-for-translation-existence" tabindex="-1"><a class="header-anchor" href="#checking-for-translation-existence" aria-hidden="true">#</a> Checking For Translation Existence</h3><p>Use the <code>translationExists()</code> method to determine if a translation exists or not:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">translationExists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;animals.dog&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23),C={class:"custom-container details"},M=n("summary",null,"Technical Details",-1),K=n("p",null,"If no locale is set it will search for the translation key in any language.",-1),B=n("p",null,[n("strong",null,"Parameters"),s(":")],-1),V=n("strong",null,"key",-1),O=n("u",null,"string",-1),G=n("li",null,[n("strong",null,"locale"),s(": Optional "),n("u",null,"string"),s(" that determines the translation's locale.")],-1),F=n("p",null,[n("strong",null,"Return"),s(":"),n("br"),s(" Returns a "),n("u",null,"boolean"),s(" that determines if the translation exists ("),n("code",null,"true"),s(") or not ("),n("code",null,"false"),s(").")],-1),W=l(`<h3 id="guess-translation-key-type" tabindex="-1"><a class="header-anchor" href="#guess-translation-key-type" aria-hidden="true">#</a> Guess Translation Key Type</h3><p>Use the <code>translationKeyType()</code> method to guess the type for a given translation key:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">translationKeyType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;animals.dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// group</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),j={class:"custom-container details"},J=n("summary",null,"Technical Details",-1),Q=n("p",null,[n("strong",null,"Return"),s(":"),n("br"),s(" Returns a "),n("u",null,"string"),s(" that determines the translation key type suggestion:")],-1),X=n("strong",null,'"single"',-1),Y=n("strong",null,'"group"',-1),Z=n("strong",null,'"vendor"',-1),nn=l(`<h3 id="set-a-translation-message" tabindex="-1"><a class="header-anchor" href="#set-a-translation-message" aria-hidden="true">#</a> Set A Translation Message</h3><p>Use the <code>setTranslation()</code> method to create or update a translation message:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">setTranslation</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;animals.dog&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;A dog barks.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),sn={class:"custom-container details"},an=n("summary",null,"Technical Details",-1),en=n("p",null,"This method ensures that a translation will be created regardless if it already exists or no language was found. It is very useful if you are not sure if a language or translation exists but need to set a message anyway.",-1),tn=n("p",null,[s("This does not mean that the incoming data will not be validated. All it does is check if a language exists, if not then it will be created. Next, it checks if the translation already exists if it exists then it calls the "),n("code",null,"updateTranslation()"),s(" method, otherwise if it does not exist it calls the "),n("code",null,"addTranslation()"),s(" method.")],-1),ln=n("p",null,[n("strong",null,"Parameters"),s(":")],-1),on=n("strong",null,"key",-1),pn=n("u",null,"string",-1),rn=n("li",null,[n("strong",null,"locale"),s(": A "),n("u",null,"string"),s(" that determines the translation's locale.")],-1),un=n("li",null,[n("strong",null,"message"),s(": A "),n("u",null,"string"),s(" that determines the translation message, could be empty "),n("code",null,'""'),s(".")],-1),cn=n("p",null,[n("strong",null,"Return"),s(":"),n("br"),s(" Returns a "),n("u",null,"boolean"),s(" that determines if the translation has been created/updated ("),n("code",null,"true"),s(") or not ("),n("code",null,"false"),s(").")],-1),dn=n("strong",null,"Events",-1),gn=n("br",null,null,-1),hn=l(`<h3 id="import-missing-translations" tabindex="-1"><a class="header-anchor" href="#import-missing-translations" aria-hidden="true">#</a> Import Missing Translations</h3><p>Use the <code>importMissingTranslations()</code> method to import all missing translations:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">importMissingTranslations</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>Technical Details</summary><p>If no locale was given (<code>false</code>) it imports all missing translations for each language.</p><p><strong>Parameters</strong>:</p><ul><li><strong>locale</strong>: Optional <u>false</u> or <u>string</u> that determines the locale.</li></ul></details><h3 id="update-existing-translation" tabindex="-1"><a class="header-anchor" href="#update-existing-translation" aria-hidden="true">#</a> Update Existing Translation</h3><p>Use the <code>updateTranslation()</code> method to update an existing translation message:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">updateTranslation</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;animals.dog&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;A dog barks.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),mn={class:"custom-container details"},vn=n("summary",null,"Technical Details",-1),kn=n("p",null,[n("strong",null,"Parameters"),s(":")],-1),bn=n("strong",null,"key",-1),_n=n("u",null,"string",-1),fn=n("li",null,[n("strong",null,"locale"),s(": A "),n("u",null,"string"),s(" that determines the translation's locale.")],-1),yn=n("li",null,[n("strong",null,"message"),s(": A "),n("u",null,"string"),s(" that determines the translation message, could be empty "),n("code",null,'""'),s(".")],-1),xn=n("p",null,[n("strong",null,"Return"),s(":"),n("br"),s(" Returns a "),n("u",null,"boolean"),s(" that determines if the translation has been updated ("),n("code",null,"true"),s(") or not ("),n("code",null,"false"),s(").")],-1),qn=n("strong",null,"Events",-1),Tn=n("br",null,null,-1),wn=l(`<h3 id="remove-existing-translation" tabindex="-1"><a class="header-anchor" href="#remove-existing-translation" aria-hidden="true">#</a> Remove Existing Translation</h3><p>Use the <code>removeTranslation()</code> method to remove an existing translation:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$i18n</span><span class="token operator">-&gt;</span><span class="token function">removeTranslation</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;animals.dog&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;en_US&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),An={class:"custom-container details"},Rn=n("summary",null,"Technical Details",-1),Un=n("p",null,[n("strong",null,"Parameters"),s(":")],-1),Ln=n("strong",null,"key",-1),En=n("u",null,"string",-1),Dn=n("li",null,[n("strong",null,"locale"),s(": A "),n("u",null,"string"),s(" that determines the translation's locale.")],-1),Hn=n("p",null,[n("strong",null,"Return"),s(":"),n("br"),s(" Returns a "),n("u",null,"boolean"),s(" that determines if the translation has been deleted ("),n("code",null,"true"),s(") or not ("),n("code",null,"false"),s(").")],-1),Sn=n("strong",null,"Events",-1),Nn=n("br",null,null,-1);function $n(p,In){const e=o("RouterLink"),i=o("Badge");return u(),c("div",null,[m,n("p",null,"The locale management sticks to the default behavior of Laravel. "+d(p.$site.title)+" offers some basic features used within the internationalization and translation process, e.g. loading the locale from HTTP session or GET parameter, but that's it. Most of the work will be done within the Laravel application itself:",1),v,n("details",k,[b,n("p",null,[s("All incoming data will be "),a(e,{to:"/v/1.x/guide/usage/validation/form/request/add/language/"},{default:t(()=>[s("validated")]),_:1}),s(", before creating a new language.")]),_,n("p",null,[f,s(":"),y,a(e,{to:"/v/1.x/guide/advanced/events/#language-created"},{default:t(()=>[a(i,{type:"tip",text:"LanguageCreated",vertical:"middle"})]),_:1})])]),x,n("details",q,[T,n("p",null,[w,s(":"),A,a(e,{to:"/v/1.x/guide/advanced/events/#language-deleted"},{default:t(()=>[a(i,{type:"tip",text:"LanguageDeleted",vertical:"middle"})]),_:1})])]),R,n("details",U,[L,n("p",null,[s("All incoming data will be "),a(e,{to:"/v/1.x/guide/usage/validation/form/request/add/translation/"},{default:t(()=>[s("validated")]),_:1}),s(", before creating a translation.")]),E,n("ul",null,[n("li",null,[D,s(": A "),H,s(" that determines a missing "),a(e,{to:"/v/1.x/guide/fundamentals/i18n/#translation-types"},{default:t(()=>[s("translation key")]),_:1}),s(".")]),S,N]),$,n("p",null,[I,s(":"),P,a(e,{to:"/v/1.x/guide/advanced/events/#translation-created"},{default:t(()=>[a(i,{type:"tip",text:"TranslationCreated",vertical:"middle"})]),_:1})])]),z,n("details",C,[M,K,B,n("ul",null,[n("li",null,[V,s(": A "),O,s(" that determines the "),a(e,{to:"/v/1.x/guide/fundamentals/i18n/#translation-types"},{default:t(()=>[s("translation key")]),_:1}),s(".")]),G]),F]),W,n("details",j,[J,Q,n("ul",null,[n("li",null,[X,s(": A "),a(e,{to:"/v/1.x/guide/fundamentals/i18n/#single-translations"},{default:t(()=>[s("single translation key")]),_:1}),s(' e.g. "Hello :Name".')]),n("li",null,[Y,s(": A "),a(e,{to:"/v/1.x/guide/fundamentals/i18n/#group-translations"},{default:t(()=>[s("group translation key")]),_:1}),s(' e.g. "animals.dog".')]),n("li",null,[Z,s(": A "),a(e,{to:"/v/1.x/guide/fundamentals/i18n/#vendor-translations"},{default:t(()=>[s("vendor translation key")]),_:1}),s(' e.g. "i18n::animals.dog".')])])]),nn,n("details",sn,[an,en,tn,ln,n("ul",null,[n("li",null,[on,s(": A "),pn,s(" that determines a missing "),a(e,{to:"/v/1.x/guide/fundamentals/i18n/#translation-types"},{default:t(()=>[s("translation key")]),_:1}),s(".")]),rn,un]),cn,n("p",null,[dn,s(":"),gn,a(e,{to:"/v/1.x/guide/advanced/events/#language-created"},{default:t(()=>[a(i,{type:"tip",text:"LanguageCreated",vertical:"middle"})]),_:1}),s("  "),a(e,{to:"/v/1.x/guide/advanced/events/#translation-created"},{default:t(()=>[a(i,{type:"tip",text:"TranslationCreated",vertical:"middle"})]),_:1}),s("  "),a(e,{to:"/v/1.x/guide/advanced/events/#translation-updated"},{default:t(()=>[a(i,{type:"tip",text:"TranslationUpdated",vertical:"middle"})]),_:1})])]),hn,n("details",mn,[vn,n("p",null,[s("All incoming data will be "),a(e,{to:"/v/1.x/guide/usage/validation/form/request/update/translation/"},{default:t(()=>[s("validated")]),_:1}),s(", before updating a translation.")]),kn,n("ul",null,[n("li",null,[bn,s(": A "),_n,s(" that determines an existing "),a(e,{to:"/v/1.x/guide/fundamentals/i18n/#translation-types"},{default:t(()=>[s("translation key")]),_:1}),s(".")]),fn,yn]),xn,n("p",null,[qn,s(":"),Tn,a(e,{to:"/v/1.x/guide/advanced/events/#translation-updated"},{default:t(()=>[a(i,{type:"tip",text:"TranslationUpdated",vertical:"middle"})]),_:1})])]),wn,n("details",An,[Rn,Un,n("ul",null,[n("li",null,[Ln,s(": A "),En,s(" that determines an existing "),a(e,{to:"/v/1.x/guide/fundamentals/i18n/#translation-types"},{default:t(()=>[s("translation key")]),_:1}),s(".")]),Dn]),Hn,n("p",null,[Sn,s(":"),Nn,a(e,{to:"/v/1.x/guide/advanced/events/#translation-deleted"},{default:t(()=>[a(i,{type:"tip",text:"TranslationDeleted",vertical:"middle"})]),_:1})])]),g("                            that's all folks!                            ")])}const zn=r(h,[["render",$n],["__file","index.html.vue"]]);export{zn as default};
