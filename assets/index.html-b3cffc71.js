import{_ as r,r as l,o as p,c as d,a,b as e,d as s,t as i,e as c,f as t}from"./app-c303192f.js";const u={},h=a("h2",{id:"introduction",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),e(" Introduction")],-1),g={href:"https://en.wikipedia.org/wiki/Internationalization_and_localization",target:"_blank",rel:"noopener noreferrer"},m={href:"https://laravel.com/docs/10.x/localization",target:"_blank",rel:"noopener noreferrer"},v=a("h2",{id:"locale",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#locale","aria-hidden":"true"},"#"),e(" Locale")],-1),k=a("p",null,"Locale is a set of parameters that defines the user's language, country and any special variant preferences that the user wants to see in their user interface. It is usually identified by an ID consisting of a language ID and a region ID.",-1),f=a("code",null,"en_US",-1),b={href:"https://laravel.com/docs/10.x/localization#using-short-keys",target:"_blank",rel:"noopener noreferrer"},_=a("code",null,"ll_CC",-1),y=a("code",null,"ll",-1),w={href:"https://www.loc.gov/standards/iso639-2/",target:"_blank",rel:"noopener noreferrer"},x=a("code",null,"CC",-1),q={href:"https://www.loc.gov/standards/iso639-2/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://unicode-org.github.io/icu/userguide/locale/#the-locale-concept",target:"_blank",rel:"noopener noreferrer"},I=t('<h2 id="language" tabindex="-1"><a class="header-anchor" href="#language" aria-hidden="true">#</a> Language</h2><p>A language and a locale may seem to be identical. And under the hood, they act the same but have different purposes.</p><p>While a locale is meant to give information about a user&#39;s region or location. The language will be used to reference translations, to tell the system that a user can understand a text from a given locale.</p><p>Both are following the ISO-15897 standard.</p><h2 id="translations" tabindex="-1"><a class="header-anchor" href="#translations" aria-hidden="true">#</a> Translations</h2><p>Typically, translation strings are stored in files within the <code>lang/</code> directory. Within this directory, there should be a subdirectory for each language supported by your application. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages.</p><h3 id="translation-methods" tabindex="-1"><a class="header-anchor" href="#translation-methods" aria-hidden="true">#</a> Translation Methods</h3>',7),z={href:"https://laravel.com/docs/10.x/localization#retrieving-translation-strings",target:"_blank",rel:"noopener noreferrer"},L=a("code",null,"__()",-1),S=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Hello :name!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Mickey&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="translation-types" tabindex="-1"><a class="header-anchor" href="#translation-types" aria-hidden="true">#</a> Translation Types</h3><h4 id="single-translations" tabindex="-1"><a class="header-anchor" href="#single-translations" aria-hidden="true">#</a> Single Translations</h4>`,3),A={href:"https://laravel.com/docs/10.x/localization#using-translation-strings-as-keys",target:"_blank",rel:"noopener noreferrer"},j=a("code",null,'"Hello World!"',-1),N=t(`<p>For example, if your application has a German translation, you should create a <code>lang/de.json</code> file:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;I love programming.&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ich liebe es zu programmieren.&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use the <code>I love programming.</code> translation key within the translation method to retrieve the message:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;I love programming.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="group-translations" tabindex="-1"><a class="header-anchor" href="#group-translations" aria-hidden="true">#</a> Group Translations</h4><p>Translations can be grouped in their <code>.php</code> translation files. This is the approach Laravel uses to manage translation strings for built-in Laravel features such as validation error messages.</p><p>For example, if your application has a German translation for validation messages, you should create a <code>lang/de/validation.php</code> file:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;failed&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;Whoopsi something went wrong.&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use the <code>validation.failed</code> translation key within translation methods to retrieve the message:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;validation.failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),W={class:"custom-container tip"},D=a("p",{class:"custom-container-title"},"Nested Translation Messages",-1),V={href:"https://laravel.com/docs/10.x/helpers#method-array-dot",target:"_blank",rel:"noopener noreferrer"},C=a("code",null,"Arr::dot()",-1),E=a("code",null,"validation.first_name.required",-1),U=t(`<h4 id="vendor-translations" tabindex="-1"><a class="header-anchor" href="#vendor-translations" aria-hidden="true">#</a> Vendor Translations</h4><p>Some packages may ship with their own language files. Instead of changing the package&#39;s core files to tweak these lines, you may override them by placing files in the <code>lang/vendor/{package}/{locale}</code> directory.</p><p>So, for example, if you need to override the English translation strings in <code>validation.php</code> for a package named <code>a/b</code>, you should place a language file at: <code>lang/vendor/b/en/validation.php</code>. Within this file, you should only define the translation strings you wish to override. Any translation strings you don&#39;t override will still be loaded from the package&#39;s original language files.</p><p>Use a translation key like <code>b::validation.failed</code> within the translation method to retrieve the translation message:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;b::validation.failed&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Vendor And Single Translations?</p><p>Vendors could use single translations. However, these files are not stored within the <code>lang/vendor/</code> directory. Instead, they will be merged with the <code>lang/{locale}.json</code> file.</p></div><h3 id="translation-parameters" tabindex="-1"><a class="header-anchor" href="#translation-parameters" aria-hidden="true">#</a> Translation Parameters</h3><p>If you wish, you may define placeholders in your translation strings. All placeholders are prefixed with a <code>:</code>. For example, you may define a welcome message with a placeholder name:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;welcome&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Welcome, :name&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To replace the placeholders when retrieving a translation string, you may pass an array of replacements as the second argument to the translation method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;messages.welcome&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;dayle&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If your placeholder contains all capital letters, or only has its first letter capitalized, the translated value will be capitalized accordingly:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;welcome&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Welcome, :NAME&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Welcome, DAYLE</span>
<span class="token string single-quoted-string">&#39;goodbye&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Goodbye, :Name&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Goodbye, Dayle</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pluralization" tabindex="-1"><a class="header-anchor" href="#pluralization" aria-hidden="true">#</a> Pluralization</h3>`,14),F=a("code",null,"|",-1),M=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;apples&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;There is one apple|There are many apples&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),G={href:"https://laravel.com/docs/10.x/localization#using-translation-strings-as-keys",target:"_blank",rel:"noopener noreferrer"},H=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;There is one apple|There are many apples&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hay una manzana|Hay muchas manzanas&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may even create more complex pluralization rules which specify translation strings for multiple ranges of values:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;apples&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;{0} There are none|[1,19] There are some|[20,*] There are many&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After defining a translation string that has pluralization options, you may use the <code>trans_choice()</code> function to retrieve the line for a given &quot;count&quot;. In this example, since the count is greater than one, the plural form of the translation string is returned:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">trans_choice</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;messages.apples&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may also define placeholder attributes in pluralization strings. These placeholders may be replaced by passing an array as the third argument to the <code>trans_choice()</code> function:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;minutes_ago&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;{1} :value minute ago|[2,*] :value minutes ago&#39;</span><span class="token punctuation">,</span>
 
<span class="token function">trans_choice</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;time.minutes_ago&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;value&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you would like to display the integer value that was passed to the <code>trans_choice()</code> function, you may use the built-in <code>:count</code> placeholder:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;apples&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;{0} There are none|{1} There is one|[2,*] There are :count&#39;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9);function O(o,B){const n=l("ExternalLinkIcon");return p(),d("div",null,[h,a("p",null,[e("Internationalization ("),a("a",g,[e("I18n"),s(n)]),e(") refers to the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. For Web applications, this is of particular importance because the potential users may be worldwide. "+i(o.$site.title)+" offers a full spectrum of I18N features that support message translation, view translation, date and number formatting.",1)]),a("p",null,[e("Most of these features are already implemented within the Laravel framework - take a peek at "),a("a",m,[e("Laravel's Localization feature"),s(n)]),e(". "+i(o.$site.title)+" extends these features, to take advantage of a fully covered translation and internationalization workflow.",1)]),v,k,a("p",null,[e("For example, the ID "),f,e(' stands for the locale of "English and the United States". This is the ISO-15897 standard that is recommended in the '),a("a",b,[e("Laravel documentation"),s(n)]),e(".")]),a("p",null,[e("For consistency reasons, all locale IDs used in "+i(o.$site.title)+" should be canonicalized to the format of ",1),_,e(", where "),y,e(" is a two- or three-letter lowercase language code according to "),a("a",w,[e("ISO-639"),s(n)]),e(" and "),x,e(" is a two-letter country code according to "),a("a",q,[e("ISO-3166"),s(n)]),e(". More details about locales can be found in the "),a("a",T,[e("documentation of the ICU project"),s(n)]),e(".")]),I,a("p",null,[e("Translation methods are used to determine which text needs to be translated. "),a("a",z,[e("Laravel's most common approach"),s(n)]),e(" is to use the "),L,e(" method to translate strings:")]),S,a("p",null,[e("Single translations (or "),a("a",A,[e("translation strings as keys"),s(n)]),e(") are strings e.g. "),j,e(" which need to be translated. This approach is recommended for applications that have numerous translation strings.")]),N,a("div",W,[D,a("p",null,[e("All grouped translation (including vendors) can use a multidimensional array with nested keys. In that case the translation keys will be converted with "),a("a",V,[C,s(n)]),e(" method. A translation key may look like "),E,e(".")])]),U,a("p",null,[e("Pluralization is a complex problem, as different languages have a variety of complex rules for pluralization; however, "+i(o.$site.title)+" can help you translate strings differently based on pluralization rules that you define. Using a ",1),F,e(" character, you may distinguish singular and plural forms of a string:")]),M,a("p",null,[e("Of course, pluralization is also supported when using "),a("a",G,[e("translation strings as keys"),s(n)]),e(":")]),H,c("                            that's all folks!                            ")])}const P=r(u,[["render",O],["__file","index.html.vue"]]);export{P as default};
