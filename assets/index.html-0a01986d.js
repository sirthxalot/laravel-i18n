import{_ as i,r as n,o as l,c as r,a as e,b as a,d as s,w as c,e as d,f as u}from"./app-c303192f.js";const p={},h=e("h2",{id:"introduction",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),a(" Introduction")],-1),m=e("code",null,"SetTranslationRequest",-1),_={href:"https://laravel.com/docs/10.x/validation#form-request-validation",target:"_blank",rel:"noopener noreferrer"},k=u(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Sirthxalot<span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>I18n<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>SetTranslationRequest</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span><span class="token class-name type-declaration">SetTranslationRequest</span> <span class="token variable">$request</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validation-rules" tabindex="-1"><a class="header-anchor" href="#validation-rules" aria-hidden="true">#</a> Validation Rules</h2><h3 id="locale" tabindex="-1"><a class="header-anchor" href="#locale" aria-hidden="true">#</a> locale</h3><p>A <u>string</u> that determines a valid and existing locale, e.g. &quot;en&quot;, &quot;en_US&quot; or &quot;eng_US&quot;.</p><ul><li>required</li><li>min. 2 characters</li><li>max. 6 characters</li><li>must follow ISO-15897 convention</li></ul><h3 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> key</h3>`,6),v=e("u",null,"string",-1),f=e("ul",null,[e("li",null,"required"),e("li",null,"max. 65'535 characters")],-1),b=e("h3",{id:"message",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#message","aria-hidden":"true"},"#"),a(" message")],-1),g=e("p",null,[a("A "),e("u",null,"string"),a(' that determines a valid message, e.g. "Hello :Name", "A dog barks.", "".')],-1),x=e("ul",null,[e("li",null,"max. 65'535 characters")],-1);function q(y,w){const t=n("ExternalLinkIcon"),o=n("RouterLink");return l(),r("div",null,[h,e("p",null,[a("The "),m,a(),e("a",_,[a("form request"),s(t)]),a(" can be used to validate data before a translation will be set. These validation rules are not implemented within any method of the I18n service since they are obsolete. However, you can use the form request in any method you want:")]),k,e("p",null,[a("A "),v,a(" that determines a valid "),s(o,{to:"/v/1.x/guide/fundamentals/i18n/#translation-types"},{default:c(()=>[a("translation key")]),_:1}),a(', e.g. "Hello World", "animals.dog" or "i18n::animals.dog".')]),f,b,g,x,d("                            that's all folks!                            ")])}const R=i(p,[["render",q],["__file","index.html.vue"]]);export{R as default};
