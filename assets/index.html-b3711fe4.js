import{_ as r,r as o,o as c,c as u,a,b as n,d as e,t as p,w as d,e as h,f as s}from"./app-c303192f.js";const m={},g=a("h2",{id:"introduction",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),n(" Introduction")],-1),v=a("code",null,"UpdateTranslationRequest",-1),k={href:"https://laravel.com/docs/10.x/validation#form-request-validation",target:"_blank",rel:"noopener noreferrer"},f=s(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Sirthxalot<span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>I18n<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>UpdateTranslationRequest</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token class-name type-declaration">UpdateTranslationRequest</span> <span class="token variable">$request</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validation-rules" tabindex="-1"><a class="header-anchor" href="#validation-rules" aria-hidden="true">#</a> Validation Rules</h2><h3 id="locale" tabindex="-1"><a class="header-anchor" href="#locale" aria-hidden="true">#</a> locale</h3><p>A <u>string</u> that determines a valid and existing locale, e.g. &quot;en&quot;, &quot;en_US&quot; or &quot;eng_US&quot;.</p><ul><li>required</li><li>language must be existing</li></ul><h3 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> key</h3>`,6),b=a("u",null,"string",-1),q=s('<ul><li>required</li><li>translation key must be existing</li></ul><h3 id="message" tabindex="-1"><a class="header-anchor" href="#message" aria-hidden="true">#</a> message</h3><p>A <u>string</u> that determines a valid message, e.g. &quot;Hello :Name&quot;, &quot;A dog barks.&quot;, &quot;&quot;.</p><ul><li>max. 65&#39;535 characters</li></ul><h2 id="replacing-form-request" tabindex="-1"><a class="header-anchor" href="#replacing-form-request" aria-hidden="true">#</a> Replacing Form Request</h2>',5),_={href:"https://laravel.com/docs/10.x/validation#form-request-validation",target:"_blank",rel:"noopener noreferrer"},y=s(`<p>After creating your form request you can register it within the I18n configuration (<code>config/i18n.php</code>):</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;validation&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;translation&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;update&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Sirthxalot<span class="token punctuation">\\</span>Laravel<span class="token punctuation">\\</span>I18n<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Requests<span class="token punctuation">\\</span>UpdateTranslationRequest</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">Â </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Changing the form request can be dangerous and may lead into problems. Please do not change the form requests if you are not 100% sure what you are doing - stick to our plan. We also may not support you if you are using custom form requests.</p></div>`,3);function x(i,w){const t=o("ExternalLinkIcon"),l=o("RouterLink");return c(),u("div",null,[g,a("p",null,[n("The "),v,n(),a("a",k,[n("form request"),e(t)]),n(" will be used to validate data before a translation will be updated. It contains the common validation rules provided by "+p(i.$site.title)+". You can use the form request in any method you want:",1)]),f,a("p",null,[n("A "),b,n(" that determines a valid "),e(l,{to:"/v/1.x/guide/fundamentals/i18n/#translation-types"},{default:d(()=>[n("translation key")]),_:1}),n(', e.g. "Hello World", "animals.dog" or "i18n::animals.dog".')]),q,a("p",null,[n("You can change the validation rules for new languages by "),a("a",_,[n("creating your own form request"),e(t)]),n(". However, we do not recomend to do this.")]),y,h("                            that's all folks!                            ")])}const I=r(m,[["render",x],["__file","index.html.vue"]]);export{I as default};
